{"remainingRequest":"/Users/keppelen/Projects/somos/plurall/plurall-ui/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/preset-env\",{\"targets\":{\"browsers\":[\"last 2 versions\",\"safari >= 7\"]}}],[\"@babel/preset-react\"],[\"/Users/keppelen/Projects/somos/plurall/plurall-ui/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-proposal-class-properties\",[\"/Users/keppelen/Projects/somos/plurall/plurall-ui/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/keppelen/Projects/somos/plurall/plurall-ui/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheDirectory\":true,\"cacheCompression\":false,\"compact\":false}!/Users/keppelen/Projects/somos/plurall/plurall-ui/src/components/ProgressBar/ProgressBar.jsx","dependencies":[{"path":"/Users/keppelen/Projects/somos/plurall/plurall-ui/src/components/ProgressBar/ProgressBar.jsx","mtime":1542820173049},{"path":"/Users/keppelen/Projects/somos/plurall/plurall-ui/node_modules/docz-core/node_modules/cache-loader/dist/cjs.js","mtime":1542822444129},{"path":"/Users/keppelen/Projects/somos/plurall/plurall-ui/node_modules/babel-loader/lib/index.js","mtime":1541686617987}],"contextDependencies":[],"result":["var _jsxFileName = \"/Users/keppelen/Projects/somos/plurall/plurall-ui/src/components/ProgressBar/ProgressBar.jsx\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n  \", \"\\n\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n  \", \"\\n  \", \"\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    background-color: \", \";\\n  \"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    width: \", \"%;\\n    height: 100%;\\n    animation: \", \" 1s ease-out forwards;\\n  \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    from { width: 0; } to { width: \", \"%; }\\n  \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  height: 3px;\\n  border-radius: 4px;\\n  line-height: 1.43;\\n  background-color: \", \";\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nimport React from 'react';\nimport styled, { css, keyframes } from 'react-emotion';\nimport PropTypes from 'prop-types';\nimport Text from '../Text/Text';\nimport theme from '../themes';\nvar baseStyles = css(_templateObject(), theme.colors.lightestGrey);\n\nvar percentageFilledStyles = function percentageFilledStyles(_ref) {\n  var percentage = _ref.percentage;\n  var animation = keyframes(_templateObject2(), percentage);\n  return css(_templateObject3(), percentage, animation);\n};\n\nvar thresholdStyles = function thresholdStyles(_ref2) {\n  var threshold = _ref2.threshold,\n      percentage = _ref2.percentage;\n  var color = percentage >= threshold ? theme.colors.secondaryGreen : theme.colors.baseRed;\n  return css(_templateObject4(), color);\n};\n\nvar PercentageFilled = styled('div')(_templateObject5(), percentageFilledStyles, thresholdStyles);\nvar StyledProgressBar = styled('div')(_templateObject6(), baseStyles);\n\nfunction ProgressBar(props) {\n  var children = props.children,\n      rest = _objectWithoutProperties(props, [\"children\"]);\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, children), React.createElement(StyledProgressBar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(PercentageFilled, Object.assign({}, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }))));\n}\n\nProgressBar.propTypes = {\n  /** Holds the information the bar is yielding */\n  children: PropTypes.string.isRequired,\n\n  /** Threshold that makes the green color of the bar go red, between 0 and 100 */\n  threshold: PropTypes.number.isRequired,\n\n  /** The amount of filling the progress bar has, between 0 and 100 */\n  percentage: PropTypes.number.isRequired\n};\nvar _default = ProgressBar;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(baseStyles, \"baseStyles\", \"/Users/keppelen/Projects/somos/plurall/plurall-ui/src/components/ProgressBar/ProgressBar.jsx\");\n  reactHotLoader.register(percentageFilledStyles, \"percentageFilledStyles\", \"/Users/keppelen/Projects/somos/plurall/plurall-ui/src/components/ProgressBar/ProgressBar.jsx\");\n  reactHotLoader.register(thresholdStyles, \"thresholdStyles\", \"/Users/keppelen/Projects/somos/plurall/plurall-ui/src/components/ProgressBar/ProgressBar.jsx\");\n  reactHotLoader.register(PercentageFilled, \"PercentageFilled\", \"/Users/keppelen/Projects/somos/plurall/plurall-ui/src/components/ProgressBar/ProgressBar.jsx\");\n  reactHotLoader.register(StyledProgressBar, \"StyledProgressBar\", \"/Users/keppelen/Projects/somos/plurall/plurall-ui/src/components/ProgressBar/ProgressBar.jsx\");\n  reactHotLoader.register(ProgressBar, \"ProgressBar\", \"/Users/keppelen/Projects/somos/plurall/plurall-ui/src/components/ProgressBar/ProgressBar.jsx\");\n  reactHotLoader.register(_default, \"default\", \"/Users/keppelen/Projects/somos/plurall/plurall-ui/src/components/ProgressBar/ProgressBar.jsx\");\n  leaveModule(module);\n})();\n\n;\nProgressBar.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ProgressBar\",\n  \"props\": {\n    \"children\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Holds the information the bar is yielding\"\n    },\n    \"threshold\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Threshold that makes the green color of the bar go red, between 0 and 100\"\n    },\n    \"percentage\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"The amount of filling the progress bar has, between 0 and 100\"\n    }\n  }\n};",{"version":3,"sources":["/Users/keppelen/Projects/somos/plurall/plurall-ui/src/components/ProgressBar/ProgressBar.jsx"],"names":["React","styled","css","keyframes","PropTypes","Text","theme","baseStyles","colors","lightestGrey","percentageFilledStyles","percentage","animation","thresholdStyles","threshold","color","secondaryGreen","baseRed","PercentageFilled","StyledProgressBar","ProgressBar","props","children","rest","propTypes","string","isRequired","number"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,IAAiBC,GAAjB,EAAsBC,SAAtB,QAAuC,eAAvC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AAEA,OAAOC,KAAP,MAAkB,WAAlB;AAEA,IAAMC,UAAU,GAAGL,GAAH,oBAIMI,KAAK,CAACE,MAAN,CAAaC,YAJnB,CAAhB;;AAOA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,OAAoB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;AACjD,MAAMC,SAAS,GAAGT,SAAH,qBACoBQ,UADpB,CAAf;AAIA,SAAOT,GAAP,qBACWS,UADX,EAGeC,SAHf;AAKD,CAVD;;AAYA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,QAA+B;AAAA,MAA5BC,SAA4B,SAA5BA,SAA4B;AAAA,MAAjBH,UAAiB,SAAjBA,UAAiB;AACrD,MAAMI,KAAK,GAAIJ,UAAU,IAAIG,SAAf,GAA4BR,KAAK,CAACE,MAAN,CAAaQ,cAAzC,GAC4BV,KAAK,CAACE,MAAN,CAAaS,OADvD;AAGA,SAAOf,GAAP,qBACsBa,KADtB;AAGD,CAPD;;AASA,IAAMG,gBAAgB,GAAGjB,MAAM,CAAC,KAAD,CAAT,qBAClBS,sBADkB,EAElBG,eAFkB,CAAtB;AAKA,IAAMM,iBAAiB,GAAGlB,MAAM,CAAC,KAAD,CAAT,qBACnBM,UADmB,CAAvB;;AAIA,SAASa,WAAT,CAAqBC,KAArB,EAA4B;AAAA,MAClBC,QADkB,GACID,KADJ,CAClBC,QADkB;AAAA,MACLC,IADK,4BACIF,KADJ;;AAG1B,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOC,QAAP,CADF,EAEE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,gBAAD,oBAAsBC,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CAFF,CADF;AAQD;;AAEDH,WAAW,CAACI,SAAZ,GAAwB;AACtB;AACAF,EAAAA,QAAQ,EAAElB,SAAS,CAACqB,MAAV,CAAiBC,UAFL;;AAGtB;AACAZ,EAAAA,SAAS,EAAEV,SAAS,CAACuB,MAAV,CAAiBD,UAJN;;AAKtB;AACAf,EAAAA,UAAU,EAAEP,SAAS,CAACuB,MAAV,CAAiBD;AANP,CAAxB;eASeN,W;AAAf;;;;;;;;;;;;0BA3DMb,U;0BAOAG,sB;0BAYAG,e;0BASAK,gB;0BAKAC,iB;0BAIGC,W","sourcesContent":["import React from 'react'\nimport styled, { css, keyframes } from 'react-emotion'\nimport PropTypes from 'prop-types'\nimport Text from '../Text/Text'\n\nimport theme from '../themes'\n\nconst baseStyles = css`\n  height: 3px;\n  border-radius: 4px;\n  line-height: 1.43;\n  background-color: ${theme.colors.lightestGrey};\n`\n\nconst percentageFilledStyles = ({ percentage }) => {\n  const animation = keyframes`\n    from { width: 0; } to { width: ${percentage}%; }\n  `\n\n  return css`\n    width: ${percentage}%;\n    height: 100%;\n    animation: ${animation} 1s ease-out forwards;\n  `\n}\n\nconst thresholdStyles = ({ threshold, percentage }) => {\n  const color = (percentage >= threshold) ? theme.colors.secondaryGreen :\n                                            theme.colors.baseRed\n\n  return css`\n    background-color: ${color};\n  `\n}\n\nconst PercentageFilled = styled('div')`\n  ${percentageFilledStyles}\n  ${thresholdStyles}\n`\n\nconst StyledProgressBar = styled('div')`\n  ${baseStyles}\n`\n\nfunction ProgressBar(props) {\n  const { children, ...rest } = props\n\n  return (\n    <div>\n      <Text>{children}</Text>\n      <StyledProgressBar>\n        <PercentageFilled {...rest}/>\n      </StyledProgressBar>\n    </div>\n  )\n}\n\nProgressBar.propTypes = {\n  /** Holds the information the bar is yielding */\n  children: PropTypes.string.isRequired,\n  /** Threshold that makes the green color of the bar go red, between 0 and 100 */\n  threshold: PropTypes.number.isRequired,\n  /** The amount of filling the progress bar has, between 0 and 100 */\n  percentage: PropTypes.number.isRequired\n}\n\nexport default ProgressBar\n"]}]}